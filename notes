# How It Works

1. Initialization: The application starts by initializing the main window and loading the necessary UI components from .ui files located in the gui/ directory.

2. Configuration: Configuration parameters are read from config.ini and loaded into the Parameters class in configParams.py.

3. Model Loading: Deep learning models for plate and character recognition are loaded using PyTorch from the yolov5/ directory.

4. GUI Interaction: The main window (MainWindow class in home-yolo.py) sets up the user interface and connects signals and slots for various buttons and actions.

5. Real-Time Processing: The application captures video frames, processes them to detect and recognize license plates, and updates the GUI with the results.

6. Database Operations: Detected license plates and related information are stored and retrieved from a database using SQLAlchemy.


# File and Directory Descriptions

__pycache__/: Contains compiled Python files.

.DS_Store: A macOS system file that stores custom attributes of a folder.

.gitignore: Specifies files and directories to be ignored by Git.

.idea/: Contains project-specific settings for JetBrains IDEs.

ai/: Likely contains AI-related code and models.

business/: Could contain business logic and rules.

config.ini: Configuration file with parameters for the application.

configParams.py: Contains the Parameters class that loads and stores configuration parameters.

database/: Contains database-related utilities and models.

description.md: Provides a description and documentation for the project.

enteries_window.py: Manages the entries window in the GUI.

gui/: Contains .ui files for the GUI layout.

hdf5/: Likely contains HDF5 files for storing large datasets.

helper/: Contains helper functions and utilities.

home-keras.py: Another main script, possibly using Keras for model inference.

home-yolo.py: The main script for running the LPR application using YOLO models.

how_many_possibilities.py: Likely a script for calculating possibilities or permutations.

icons/: Contains icon images used in the GUI.

iranis yolov8 trainer/: Likely contains training scripts and models for YOLOv8.

LICENSE: The license file for the project.

model/: Contains machine learning models.

PDF-Research/: Contains research papers and articles.

README.md: Provides an overview and instructions for the project.

repo_images/: Contains images used in the repository.

requirements-update.txt: Updated list of required Python packages.

requirements.txt: List of required Python packages.

resident_view.py: Manages the resident view window in the GUI.

residents_edit.py: Manages the resident edit window in the GUI.

residents_main.py: Manages the main residents window in the GUI.

services/: Contains service-related code, possibly for external integrations.

streamlit_app.py: A script for running a Streamlit application.  Streamlit is primarily used for building data science and machine learning applications. It allows you to create interactive dashboards and visualizations with minimal code.

temp/: Temporary files.

Templates/: Contains template files.

vazir.ttf: A font file used in the application.

workshop/: Likely contains workshop-related code or materials.

yolov5/: Contains YOLOv5 models and related code.


# Key Classes and Functions

Parameters class in configParams.py: Loads and stores configuration parameters from config.ini.

MainWindow class in home-yolo.py: Sets up the main window and connects GUI components.

residentsWindow class in residents_main.py: Manages the residents window.

dbGetAllResidents, dbRemoveResident in database/db_resident_utils.py: Database functions for managing residents.

db_entries_time, dbGetAllEntries in database/db_entries_utils.py: Database functions for managing entries.

# Folders checkin:
- ai: OK
- business: OK
- database:  To translate from persian to eng. OK
    - classEntries: Ok
    - classResidents: Ok
    - db_entries_utils: OK
    - db_resident_utils: Ok
- gui: In process. To translate from persian to eng. (All needs to be modified)
    -plateQLineEdit.py OK

- hdf5: In process. A new model_char_recognition model is needed for colombian plates.
- helper:  jalali, persian_typer, text_decorator are deprecated files that perform persian translation. OK
- icons: OK. Maybe can be update.
- iranis yolov8 trainer: OK. Useful as guide. Deprecated.
- model: In process. Models needs to be updated.
- PDF-Research: OK.
- repo_images: In process. Needs to be update.
- service: OK. Deprecated.
- temp: OK. Deprecated.
- Templates: In process. Needs to be change by colombian plates templates.
- workshop: OK. Deprecated.
- yolov5: In process. Needs to be all reviewed, from this we can prepare a new model using a recent yolo model.

# main files (in main folder)
- config.ini: OK. Maybe check some parameters.
- configParams: Have some persian related func that needs to be change and tested. OK
- enteries_window: Have things to be translate and rebuild from persian functions. OK
- home-keras: In process. Needs to be consider how useful is using a keras model for main application.
- home-yolo: In process. MAIN FILE. Needs to be rebuild considering all the proyect folder.
- how_many_possibilities: In process. Needs to be readapt to colombian plates patterns.
- residents_view: In process. Needs a review and readapt. ok for english 
- residents_edit: In process. Needs a review and readapt. ok for english 
- residents_main: In process. Needs a review and readapt. ok for english
- streamlit_app: OK. Deprecated

# TODO
- Retrain models for colombian plates recognition (characters recognition and plates segmentation).
- Erase and readapt scripts that translate and use persian chars.
- Change chars in db scripts and tables in db.
- Translate GUI from persian to eng.
